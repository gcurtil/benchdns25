# syntax=docker/dockerfile:1

# specify the base image to  be used for the application, alpine or ubuntu
# FROM golang:1.18

# Microsoft also offers language-specific devcontainer images. For Go, use:
# FROM mcr.microsoft.com/devcontainers/go:1-ubuntu

# specific to the Go version app was tested with:
FROM mcr.microsoft.com/devcontainers/go:1.18

# install packages to build c++ version and python3 
RUN apt update -y && apt install -y python3-pip \
  python3-pybind11 \
  tar git curl wget tree \
  sqlite3 \
  build-essential g++ libunbound-dev libleveldb-dev liblmdb-dev

# C++ app build
WORKDIR /appsrc/cxx
RUN mkdir -p /app/cxx
COPY cxx/* ./
RUN g++ $(< flags_gcc) -o /app/cxx/dnsperf_gcc dnsperf_main.cpp dnsquery.cpp utils.cpp -lunbound -lleveldb
#RUN g++ $(< flags_gcc) -o /app/cxx/dnsperf_gcc_static dnsperf_main.cpp dnsquery.cpp utils.cpp -Wl,-Bstatic \
#  -lunbound -lleveldb -Wl,-Bdynamic -lpthread -lsnappy -lnettle 
#RUN g++ $(< flags_gcc) -o /app/cxx/dnsperf_gcc_static dnsperf_main.cpp dnsquery.cpp utils.cpp \
# -l:/usr/lib/x86_64-linux-gnu/libunbound.a -lleveldb

# Python app build
# here no build step per se, we just copy the source files and pip install the requirements file
WORKDIR /app/python

COPY python/requirements.txt ./
# Run pip to download and install requirements
# RUN pip install --no-cache-dir --upgrade -r /app/python/requirements.txt
RUN pip install -r /app/python/requirements.txt

COPY python/*.py ./


# Go app build
WORKDIR /appsrc/golang
RUN mkdir -p /app/golang

# pre-copy/cache go.mod for pre-downloading dependencies and only redownloading them in subsequent builds if they change
COPY golang/go.mod golang/go.sum ./
RUN go mod download && go mod verify

# rest of the source
# COPY golang/*.go ./
COPY golang/cmd/ ./cmd

# build go app 
RUN go build -o /app/golang/dnsperf ./cmd/dnsperf/dnsperf.go 
RUN go build -o /app/golang/dbsync ./cmd/dbsync/dbsync.go 

# TMP: python pybind11
WORKDIR /appsrc/python
COPY python/*.py python/*.cpp ./
RUN g++ -O3 -Wall -shared -std=c++14 -fPIC $(/usr/bin/python3 -m pybind11 --includes) \
  -o cxxdnsquery$(/usr/bin/python3-config --extension-suffix) \
  cxxdnsquery.cpp /appsrc/cxx/dnsquery.cpp /appsrc//cxx/utils.cpp -lunbound 

WORKDIR /app/python
RUN cp -av /appsrc/python /app/

# Now prepare run scripts
# copy servers and domains to qoery and run script
RUN mkdir -p /app
RUN mkdir -p /app/output
COPY servers.txt /app
COPY domains.txt /app
COPY run_benchmarks.sh /app
RUN chmod +x /app/*.sh 








